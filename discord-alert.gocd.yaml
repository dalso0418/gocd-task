# gocd.yaml

pipelines:
  discord-alert:
    group: defaultGroup
    materials:
      my-git-repo2:
        git: https://github.com/dalso0418/gocd-task
        branch: main
    stages:
      - execute-remote-command:
          jobs:
            run-ls-on-server:
              environment_variables:
                SERVER_KEY_B64: "{{SECRET:[ssh-key][gocd_deploy_key]}}"
                DISCORD_WEBHOOK: "{{SECRET:[discord-webhook][discord-webhookurl]}}"
              tasks:
                - exec:
                    # --- 1. SSH 접속 및 결과 파일로 저장 ---
                    command: bash
                    arguments:
                      - -c
                      - |
                        mkdir -p ./temp
                        echo "$SERVER_KEY_B64" | base64 --decode > ./temp/id_rsa_remote
                        chmod 600 ./temp/id_rsa_remote
                        # ssh 명령어의 결과를 task_output.log 파일로 저장합니다.
                        ssh -F /dev/null -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i ./temp/id_rsa_remote root@192.168.1.118 'echo "--- 원격 서버 파일 목록 ---"; ls -la' > task_output.log
                        rm -rf ./temp

                - exec:
                    # --- 2. 성공 알림 보내기 (결과 포함) ---
                    run_if: passed # 이전 작업이 성공했을 때만 실행
                    command: bash
                    arguments:
                      - -c
                      - |
                        # JSON에 넣기 위해 줄바꿈 문자를 \\n으로 변경하고, 따옴표를 이스케이프 처리합니다.
                        TASK_RESULT=$(cat task_output.log | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')
                        
                        # Discord 임베드 형식으로 JSON 페이로드 생성
                        JSON_PAYLOAD=$(printf '{
                          "embeds": [{
                            "title": "✅ 파이프라인 실행 성공: %s",
                            "description": "**- 파이프라인:** [%s/%s](%s)\n**- 스테이지:** %s\n**- 잡:** %s",
                            "color": 3066993,
                            "fields": [{
                              "name": "📜 원격 작업 실행 결과",
                              "value": "```bash\n%s\n```"
                            }]
                          }]
                        }' "${GO_PIPELINE_NAME}" "${GO_PIPELINE_NAME}" "${GO_PIPELINE_COUNTER}" "${GO_SERVER_URL}/go/pipelines/${GO_PIPELINE_NAME}/${GO_PIPELINE_COUNTER}/${GO_STAGE_NAME}/${GO_STAGE_COUNTER}" "${GO_STAGE_NAME}" "${GO_JOB_NAME}" "$TASK_RESULT")

                        curl -H "Content-Type: application/json" -X POST -d "$JSON_PAYLOAD" "$DISCORD_WEBHOOK"
              
              # --- 3. 작업이 실패하거나 취소되었을 때 실행되는 블록 ---
              on_cancel:
                - exec:
                    command: bash
                    arguments:
                      - -c
                      - |
                        JSON_PAYLOAD=$(printf '{
                          "embeds": [{
                            "title": "❌ 파이프라인 실행 실패: %s",
                            "description": "**- 파이프라인:** [%s/%s](%s)\n**- 스테이지:** %s\n**- 잡:** %s",
                            "color": 15158332
                          }]
                        }' "${GO_PIPELINE_NAME}" "${GO_PIPELINE_NAME}" "${GO_PIPELINE_COUNTER}" "${GO_SERVER_URL}/go/pipelines/${GO_PIPELINE_NAME}/${GO_PIPELINE_COUNTER}/${GO_STAGE_NAME}/${GO_STAGE_COUNTER}" "${GO_STAGE_NAME}" "${GO_JOB_NAME}")

                        curl -H "Content-Type: application/json" -X POST -d "$JSON_PAYLOAD" "$DISCORD_WEBHOOK"
